# Production Docker Compose configuration using pre-built images from Docker Hub

services:
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: etl_kafka
    # Persistent storage: Kafka data and logs are persisted via volumes
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_NODE_ID: ${KAFKA_NODE_ID}
      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092,CONTROLLER://:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_BOOTSTRAP_SERVERS},PLAINTEXT_HOST://${KAFKA_EXTERNAL_BOOTSTRAP_SERVERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: ${KAFKA_NODE_ID}@kafka:29093
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_METADATA_LOG_SEGMENT_MS: 15000
      KAFKA_METADATA_MAX_RETENTION_MS: 1800000
      KAFKA_METADATA_LOG_MAX_RECORD_BYTES_BETWEEN_SNAPSHOTS: 20000000
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka_data:/var/lib/kafka/data
      - kafka_logs:/var/log/kafka
    restart: unless-stopped
    networks:
      - etl-network

  nginx-waf:
    image: owasp/modsecurity-crs:nginx
    container_name: nginx_waf
    depends_on:
      - extract
      - transform
      - load
    ports:
      - "80:8080"
      - "443:8443"
    volumes:
      - ./certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
    environment:
      - MODSEC_RULE_ENGINE=On
      - SSL_PORT=8443
      - BACKEND=http://enhanced-extract-service:8000
      - SSL_CERT=/etc/nginx/certs/cert.pem
      - SSL_CERT_KEY=/etc/nginx/certs/key.pem
      - PARANOIA=1
      - BLOCKING_PARANOIA=1
      # Force HTTP to HTTPS redirection
      - ALWAYS_REDIRECT=on
      - REDIRECT_TARGET=https://$host$request_uri
    networks:
      - etl-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: etl_kafka_ui
    # Persistent UI configuration and session data
    depends_on:
      - kafka
    ports:
      - "${KAFKA_UI_PORT:-8080}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: ${KAFKA_UI_CLUSTER_NAME}
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    volumes:
      # Persistent storage for Kafka UI configuration and logs
      - kafka_ui_data:/app/data
      - kafka_ui_logs:/app/logs
    restart: unless-stopped
    networks:
      - etl-network

  extract:
    build: ./extract
    container_name: enhanced-extract-service
    environment:
      KAFKA_BROKER: kafka:29092
    # Commented out direct port exposure to enforce HTTPS-only access through WAF
    # ports:
    #   - "8000:8000"
    depends_on:
      - kafka
    volumes:
      - ./extract:/app
      - extract_uploads:/app/data/uploads
      - extract_logs:/app/logs
    networks:
      - etl-network
    command: python main_enhanced.py

  transform:
    build: ./transform
    container_name: enhanced-transform-service
    # Persistent logs and transformation data storage
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKER=${KAFKA_BOOTSTRAP_SERVERS}
    volumes:
      - ./transform:/app
      - transform_logs:/app/logs
      # Additional persistent storage for transformation data and cache
      - transform_data:/app/data
      - transform_cache:/app/cache
      - geoip_data:/app/data/geoip
    # No external ports exposed; routed via nginx-waf
    restart: unless-stopped
    networks:
      - etl-network
    command: python main_enhanced.py

  load:
    build: ./load
    container_name: enhanced-load-service
    # Persistent logs and load operation data storage
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKER=${KAFKA_BOOTSTRAP_SERVERS}
      - DB_HOST=${POSTGRES_HOST}
      - DB_PORT=${POSTGRES_PORT}
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_SSL_MODE=${POSTGRES_SSL_MODE}
      - DB_POOL_SIZE=${DB_POOL_SIZE}
      - DB_POOL_OVERFLOW=${DB_POOL_OVERFLOW}
      - DB_POOL_TIMEOUT=${DB_POOL_TIMEOUT}
      - BATCH_SIZE=1000
      - BATCH_TIMEOUT=30
      - ANALYTICS_INTERVAL=300
    volumes:
      - ./load:/app
      - load_logs:/app/logs
      # Additional persistent storage for load data and database connection state
      - load_data:/app/data
      - load_backup:/app/backup
    # No external ports exposed; routed via nginx-waf
    restart: unless-stopped
    networks:
      - etl-network
    command: python main_enhanced.py

volumes:
  # Kafka persistence volumes
  kafka_data:
    name: etl_kafka_data
  kafka_logs:
    name: etl_kafka_logs
  
  # NGINX WAF persistence volumes
  nginx_logs:
    name: etl_nginx_logs
  nginx_cache:
    name: etl_nginx_cache
  
  # Kafka UI persistence volumes
  kafka_ui_data:
    name: etl_kafka_ui_data
  kafka_ui_logs:
    name: etl_kafka_ui_logs
  
  # Extract service persistence volumes
  extract_logs:
    name: etl_extract_logs
  extract_uploads:
    name: etl_extract_uploads
  extract_data:
    name: etl_extract_data
  extract_temp:
    name: etl_extract_temp
  
  # Transform service persistence volumes
  transform_logs:
    name: etl_transform_logs
  transform_data:
    name: etl_transform_data
  transform_cache:
    name: etl_transform_cache
  geoip_data:
    name: etl_geoip_data
  
  # Load service persistence volumes
  load_logs:
    name: etl_load_logs
  load_data:
    name: etl_load_data
  load_backup:
    name: etl_load_backup

networks:
  etl-network:
    driver: bridge
    name: etl_prod_network
    # Persistent network configuration for service isolation and communication
