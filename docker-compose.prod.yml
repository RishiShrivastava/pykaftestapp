# Production Docker Compose configuration using pre-built images from Docker Hub
version: '3.8'

services:
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: etl_kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_NODE_ID: ${KAFKA_NODE_ID}
      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092,CONTROLLER://:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_BOOTSTRAP_SERVERS},PLAINTEXT_HOST://${KAFKA_EXTERNAL_BOOTSTRAP_SERVERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: ${KAFKA_NODE_ID}@kafka:29093
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_METADATA_LOG_SEGMENT_MS: 15000
      KAFKA_METADATA_MAX_RETENTION_MS: 1800000
      KAFKA_METADATA_LOG_MAX_RECORD_BYTES_BETWEEN_SNAPSHOTS: 20000000
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka_data:/var/lib/kafka/data
      - kafka_logs:/var/log/kafka
    restart: unless-stopped
    networks:
      - etl-network

  nginx-waf:
    image: owasp/modsecurity:nginx
    container_name: nginx_waf
    depends_on:
      - extract
      - transform
      - load
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-waf.conf:/etc/nginx/conf.d/etl-services.conf:ro
      - ./certs:/etc/nginx/certs:ro
    networks:
      - etl-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: etl_kafka_ui
    depends_on:
      - kafka
    ports:
      - "${KAFKA_UI_PORT:-8080}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: ${KAFKA_UI_CLUSTER_NAME}
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    restart: unless-stopped
    networks:
      - etl-network

  extract:
    image: rishi354/etl-extract:1.0.0
    container_name: etl_extract
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKER=${KAFKA_BOOTSTRAP_SERVERS}
    volumes:
      - extract_logs:/app/logs
    # No external ports exposed; routed via nginx-waf
    restart: unless-stopped
    networks:
      - etl-network

  transform:
    image: rishi354/etl-transform:1.0.0
    container_name: etl_transform
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKER=${KAFKA_BOOTSTRAP_SERVERS}
    volumes:
      - transform_logs:/app/logs
    # No external ports exposed; routed via nginx-waf
    restart: unless-stopped
    networks:
      - etl-network

  load:
    image: rishi354/etl-load:1.0.0
    container_name: etl_load
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKER=${KAFKA_BOOTSTRAP_SERVERS}
      - DB_HOST=${POSTGRES_HOST}
      - DB_PORT=${POSTGRES_PORT}
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_SSL_MODE=${POSTGRES_SSL_MODE}
      - DB_POOL_SIZE=${DB_POOL_SIZE}
      - DB_POOL_OVERFLOW=${DB_POOL_OVERFLOW}
      - DB_POOL_TIMEOUT=${DB_POOL_TIMEOUT}
    volumes:
      - load_logs:/app/logs
    # No external ports exposed; routed via nginx-waf
    restart: unless-stopped
    networks:
      - etl-network

volumes:
  kafka_data:
    name: etl_kafka_data
  kafka_logs:
    name: etl_kafka_logs
  extract_logs:
    name: etl_extract_logs
  transform_logs:
    name: etl_transform_logs
  load_logs:
    name: etl_load_logs

networks:
  etl-network:
    driver: bridge
    name: etl_prod_network
